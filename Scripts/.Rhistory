DimPlot(mono, reduction = "umap", label = "T")
mono.markers %>%
group_by(cluster) %>%
top_n(n = 10, wt = avg_log2FC) -> top10
DoHeatmap(mono, features = top10$gene) + NoLegend() + theme(text = element_text(size = 7))
myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
# percent.mt on umap
meta <- mono@meta.data %>%
rownames_to_column("Cell") %>%
select("Cell", "nFeature_RNA", "percent.mt", "nCount_RNA") #, "percent.plasmo"
umap_embed <- mono@reductions[["umap"]]@cell.embeddings %>%
as.data.frame() %>%
rownames_to_column("Cell") %>%
left_join(., meta) %>%
mutate(lib = lib_name)
sc <- scale_colour_gradientn(colours = myPalette(100), limits=c(0, deadcell_mt_cutoff))
ggplot(umap_embed, aes(UMAP_1, UMAP_2, colour = percent.mt)) +
geom_point(size = 0.3, alpha = 0.8) +
facet_wrap( ~ lib, ncol = 2, scales = "free") +
sc +
theme_bw()
View(umap_embed)
ggplot(umap_embed, aes(umap_1, umap_2, colour = percent.mt)) +
geom_point(size = 0.3, alpha = 0.8) +
facet_wrap( ~ lib, ncol = 2, scales = "free") +
sc +
theme_bw()
myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
# percent.mt on umap
meta <- mono@meta.data %>%
rownames_to_column("Cell") %>%
select("Cell", "nFeature_RNA", "percent.mt", "nCount_RNA") #, "percent.plasmo"
umap_embed <- mono@reductions[["umap"]]@cell.embeddings %>%
as.data.frame() %>%
rownames_to_column("Cell") %>%
left_join(., meta) %>%
mutate(lib = lib_name)
sc <- scale_colour_gradientn(colours = myPalette(100), limits=c(0, deadcell_mt_cutoff))
ggplot(umap_embed, aes(umap_1, umap_2, colour = percent.mt)) +
geom_point(size = 0.3, alpha = 0.8) +
facet_wrap( ~ lib, ncol = 2, scales = "free") +
sc +
theme_bw()
# nFeature on umap
sc <- scale_colour_gradientn(colours = myPalette(100), limits=c(deadcell_nF_lowercutoff, deadcell_nF_uppercutoff))
ggplot(umap_embed, aes(umap_1, umap_2, colour = nFeature_RNA)) +
geom_point(size = 0.3, alpha = 0.8) +
facet_wrap( ~ lib, ncol = 2, scales = "free") +
sc +
theme_bw()
# nCount on umap
sc <- scale_colour_gradientn(colours = myPalette(100), limits=c(min(umap_embed$nCount_RNA), max(umap_embed$nCount_RNA)))
ggplot(umap_embed, aes(umap_1, umap_2, colour = nCount_RNA)) +
geom_point(size = 0.3, alpha = 0.8) +
facet_wrap( ~ lib, ncol = 2, scales = "free") +
sc +
theme_bw()
# parasite on umap
# sc <- scale_colour_gradientn(colours = myPalette(100), limits=c(min(umap_embed$percent.plasmo), max(umap_embed$percent.plasmo)))
# ggplot(umap_embed, aes(UMAP_1, UMAP_2, colour = percent.plasmo)) +
#   geom_point(size = 0.3, alpha = 0.8) +
#   facet_wrap( ~ lib, ncol = 2, scales = "free") +
#   sc +
#   theme_bw()
# DotPlot function
myDotPlot <- function(
object,
assay = NULL,
features,
cols = c("lightgrey", "blue"),
col.min = -2.5,
col.max = 2.5,
dot.min = 0,
dot.scale = 6,
idents = NULL,
group.by = NULL,
split.by = NULL,
cluster.idents = FALSE,
scale = TRUE,
scale.by = 'radius',
scale.min = NA,
scale.max = NA
) {
assay <- assay %||% DefaultAssay(object = object)
DefaultAssay(object = object) <- assay
split.colors <- !is.null(x = split.by) && !any(cols %in% rownames(x = brewer.pal.info))
scale.func <- switch(
EXPR = scale.by,
'size' = scale_size,
'radius' = scale_radius,
stop("'scale.by' must be either 'size' or 'radius'")
)
feature.groups <- NULL
if (is.list(features) | any(!is.na(names(features)))) {
feature.groups <- unlist(x = sapply(
X = 1:length(features),
FUN = function(x) {
return(rep(x = names(x = features)[x], each = length(features[[x]])))
}
))
if (any(is.na(x = feature.groups))) {
warning(
"Some feature groups are unnamed.",
call. = FALSE,
immediate. = TRUE
)
}
features <- unlist(x = features)
names(x = feature.groups) <- features
}
cells <- unlist(x = CellsByIdentities(object = object, idents = idents))
data.features <- FetchData(object = object, vars = features, cells = cells)
data.features$id <- if (is.null(x = group.by)) {
Idents(object = object)[cells, drop = TRUE]
} else {
object[[group.by, drop = TRUE]][cells, drop = TRUE]
}
if (!is.factor(x = data.features$id)) {
data.features$id <- factor(x = data.features$id)
}
id.levels <- levels(x = data.features$id)
data.features$id <- as.vector(x = data.features$id)
if (!is.null(x = split.by)) {
splits <- object[[split.by, drop = TRUE]][cells, drop = TRUE]
if (split.colors) {
if (length(x = unique(x = splits)) > length(x = cols)) {
stop("Not enough colors for the number of groups")
}
cols <- cols[1:length(x = unique(x = splits))]
names(x = cols) <- unique(x = splits)
}
data.features$id <- paste(data.features$id, splits, sep = '_')
unique.splits <- unique(x = splits)
id.levels <- paste0(rep(x = id.levels, each = length(x = unique.splits)), "_", rep(x = unique(x = splits), times = length(x = id.levels)))
}
data.plot <- lapply(
X = unique(x = data.features$id),
FUN = function(ident) {
data.use <- data.features[data.features$id == ident, 1:(ncol(x = data.features) - 1), drop = FALSE]
avg.exp <- apply(
X = data.use,
MARGIN = 2,
FUN = function(x) {
return(mean(x = expm1(x = x)))
}
)
pct.exp <- apply(X = data.use, MARGIN = 2, FUN = PercentAbove, threshold = 0)
return(list(avg.exp = avg.exp, pct.exp = pct.exp))
}
)
names(x = data.plot) <- unique(x = data.features$id)
if (cluster.idents) {
mat <- do.call(
what = rbind,
args = lapply(X = data.plot, FUN = unlist)
)
mat <- scale(x = mat)
id.levels <- id.levels[hclust(d = dist(x = mat))$order]
}
data.plot <- lapply(
X = names(x = data.plot),
FUN = function(x) {
data.use <- as.data.frame(x = data.plot[[x]])
data.use$features.plot <- rownames(x = data.use)
data.use$id <- x
return(data.use)
}
)
data.plot <- do.call(what = 'rbind', args = data.plot)
if (!is.null(x = id.levels)) {
data.plot$id <- factor(x = data.plot$id, levels = id.levels)
}
ngroup <- length(x = levels(x = data.plot$id))
if (ngroup == 1) {
scale <- FALSE
warning(
"Only one identity present, the expression values will be not scaled",
call. = FALSE,
immediate. = TRUE
)
} else if (ngroup < 5 & scale) {
warning(
"Scaling data with a low number of groups may produce misleading results",
call. = FALSE,
immediate. = TRUE
)
}
avg.exp.scaled <- sapply(
X = unique(x = data.plot$features.plot),
FUN = function(x) {
data.use <- data.plot[data.plot$features.plot == x, 'avg.exp']
if (scale) {
data.use <- scale(x = data.use)
data.use <- MinMax(data = data.use, min = col.min, max = col.max)
} else {
data.use <- log1p(x = data.use)
}
return(data.use)
}
)
avg.exp.scaled <- as.vector(x = t(x = avg.exp.scaled))
if (split.colors) {
avg.exp.scaled <- as.numeric(x = cut(x = avg.exp.scaled, breaks = 20))
}
data.plot$avg.exp.scaled <- avg.exp.scaled
data.plot$features.plot <- factor(
x = data.plot$features.plot,
levels = features
)
data.plot$pct.exp[data.plot$pct.exp < dot.min] <- NA
data.plot$pct.exp <- data.plot$pct.exp * 100
if (split.colors) {
splits.use <- vapply(
X = as.character(x = data.plot$id),
FUN = gsub,
FUN.VALUE = character(length = 1L),
pattern =  paste0(
'^((',
paste(sort(x = levels(x = object), decreasing = TRUE), collapse = '|'),
')_)'
),
replacement = '',
USE.NAMES = FALSE
)
data.plot$colors <- mapply(
FUN = function(color, value) {
return(colorRampPalette(colors = c('grey', color))(20)[value])
},
color = cols[splits.use],
value = avg.exp.scaled
)
}
color.by <- ifelse(test = split.colors, yes = 'colors', no = 'avg.exp.scaled')
if (!is.na(x = scale.min)) {
data.plot[data.plot$pct.exp < scale.min, 'pct.exp'] <- scale.min
}
if (!is.na(x = scale.max)) {
data.plot[data.plot$pct.exp > scale.max, 'pct.exp'] <- scale.max
}
if (!is.null(x = feature.groups)) {
data.plot$feature.groups <- factor(
x = feature.groups[data.plot$features.plot],
levels = unique(x = feature.groups)
)
}
plot <- ggplot(data = data.plot, mapping = aes_string(x = 'features.plot', y = 'id')) +
geom_point(mapping = aes_string(size = 'pct.exp', color = color.by)) +
scale.func(range = c(0, dot.scale), limits = c(scale.min, scale.max)) +
theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +
guides(size = guide_legend(title = 'Percent Expressed')) +
labs(
x = 'Features',
y = ifelse(test = is.null(x = split.by), yes = 'Identity', no = 'Split Identity')
) +
theme_cowplot() +
theme(axis.text.y=element_text(size=4)) +
coord_flip()
if (!is.null(x = feature.groups)) {
plot <- plot + facet_grid(
facets = ~feature.groups,
scales = "free_x",
space = "free_x",
switch = "y"
) + theme(
panel.spacing = unit(x = 1, units = "lines"),
strip.background = element_blank()
)
}
if (split.colors) {
plot <- plot + scale_color_identity()
} else if (length(x = cols) == 1) {
plot <- plot + scale_color_distiller(palette = cols)
} else {
plot <- plot + scale_color_gradient(low = cols[1], high = cols[2])
}
if (!split.colors) {
plot <- plot + guides(color = guide_colorbar(title = 'Average Expression'))
}
return(plot)
}
# dotplot to show expression of marker genes across clusters
mono %>% myDotPlot(
.,
assay = "RNA",
features = unique(top10$gene),
cols=  c("lightgrey", "blue"),
col.min = -2.5,
col.max = 2.5,
dot.min = 0,
dot.scale = 2,
idents = NULL,
group.by = NULL,
split.by = NULL,
cluster.idents = TRUE,
scale = TRUE,
scale.by = "radius",
scale.min = NA,
scale.max = NA
)
#QC coloured by clusters
# three clusters
table(mono$RNA_snn_res.0.9)
cluster.set <- unique(mono$RNA_snn_res.0.9)
# overall nFeature
sum(rowSums(mono[['RNA']]@counts) != 0)
#QC coloured by clusters
# three clusters
table(mono$RNA_snn_res.0.9)
cluster.set <- unique(mono$RNA_snn_res.0.9)
# overall nFeature
#sum(rowSums(mono[['RNA']]@counts) != 0)
# nFeature for each cluster
nF <- sapply(X = cluster.set, function(c) {
cells.c <- WhichCells(object = mono, expression = RNA_snn_res.0.9 == c)
#nFeature.c <- sum(rowSums(mono[['RNA']]@counts[, cells.c ]) != 0) / length(cells.c) # normalised by number of cells in a cluster
df.cells <- mono@meta.data[which(rownames(mono@meta.data) %in% cells.c),]
nFeature.c <- sum(df.cells$nFeature_RNA) / length(cells.c)
return(nFeature.c)
}
)
#nC <- sapply(cluster.set, function(x) sum(x == mono$RNA_snn_res.0.9))
nC <- sapply(X = cluster.set, function(c) {
cells.c <- WhichCells(object = mono, expression = RNA_snn_res.0.9 == c)
df.cells <- mono@meta.data[which(rownames(mono@meta.data) %in% cells.c),]
nCount.c <- sum(df.cells$nCount_RNA) / length(cells.c)
return(nCount.c)
}
)
# mt <- sapply(X = cluster.set, function(c) {
#   cells.c <- WhichCells(object = mono, expression = RNA_snn_res.0.9 == c)
#   mt.df <- mono[colnames(mono)%in%cells.c,]
#   mt <- sum(mono$percent.mt[ cells.c ] != 0) / length(cells.c) # normalised by number of cells in a cluster
#   return(mt)
# }
# )
# First the cluster annotation and the tsne embeddings are merged
label.df <- cbind(as.data.frame(mono@meta.data), as.data.frame(mono@reductions$tsne@cell.embeddings))
# using dplyr across to calculate the mean mitochondrial percentage and
# the median tsne values per cluster
label.df <- label.df %>% dplyr::group_by(seurat_clusters) %>% dplyr::summarise(dplyr::across(percent.mt, ~ mean(.), .names = "mean_{.col}"), dplyr::across(contains("tSNE"), ~ median(.)))
qc_df <- data.frame(seurat_clusters = cluster.set, nFeature_RNA = nF, nCount_RNA = nC) %>%
left_join(., label.df)
ggplot(qc_df, aes(x = nFeature_RNA, y = nCount_RNA, size = nCount_RNA, colour = mean_percent.mt)) + #, label = seurat_clusters
geom_point(alpha = 0.7) +
#geom_text(check_overlap = T, hjust = 0, nudge_x = 1.5, nudge_y = 1.5, colour = "black") +
ggrepel::geom_text_repel(aes(label = seurat_clusters), size = 3) +
theme_bw()
DimPlot(mono, reduction = "umap", label = T)
install.packages("UpSet")
untr_vs_SPZ_GFPpos <- read.csv("/media/parnika/Expansion/Documents/Projects/malaria_scRNAseq/Scripts/tables/SPZ_GFPpos_vs_untr.csv")
View(untr_vs_SPZ_GFPpos)
# read tables
untr_vs_SPZ_GFPpos_human <- read.csv("/media/parnika/Expansion/Documents/Projects/malaria_scRNAseq/Scripts/tables/SPZ_GFPpos_vs_untr.csv")
# read tables
untr_vs_SPZ_GFPpos_human <- read.csv("tables/SPZ_GFPpos_vs_untr.csv")
# read tables
untr_vs_SPZ_GFPpos_human <- read.csv("tables/SPZ_GFPpos_vs_untr_human.csv")
rm(untr_vs_SPZ_GFPpos)
View(untr_vs_SPZ_GFPpos_human)
untr_vs_SPZ_GFPpos_mouse <- read.csv("/media/parnika/Expansion/Documents/Projects/malaria_scRNAseq/Data/SPZ-GFPpos_untr_df_4h.csv")
View(untr_vs_SPZ_GFPpos_mouse)
untr_vs_SPZ_GFPpos_mouse <- read.csv("../Data/SPZ-GFPpos_untr_df_4h.csv")
View(untr_vs_SPZ_GFPpos_mouse)
View(untr_vs_SPZ_GFPpos_human)
9.590115e-02
untr_vs_SPZ_GFPpos_mouse <- read.csv("../Data/SPZ-GFPpos_untr_df_4h.csv") %>%
filter(log2FoldChange > 0 & padj < 0.1)
library(tidyverse)
untr_vs_SPZ_GFPpos_mouse <- read.csv("../Data/SPZ-GFPpos_untr_df_4h.csv") %>%
filter(log2FoldChange > 0 & padj < 0.1)
RBC_vs_iRBC_human <- read.csv("/media/parnika/Expansion/Documents/Projects/malaria_scRNAseq/Scripts/tables/iRBC_vs_RBC_human_nothr.csv")
View(RBC_vs_iRBC_human)
RBC_vs_iRBC_human <- read.csv("tables/iRBC_vs_RBC_human_nothr.csv") %>%
filter(log2FoldChange > 0 & padj < 0.1)
RBC_vs_iRBC_mouse <- read.csv("/media/parnika/Expansion/Documents/Projects/malaria_scRNAseq/Data/iRBC_RBC_4h.csv")
View(RBC_vs_iRBC_mouse)
RBC_vs_iRBC_mouse <- read.csv("../Data/iRBC_RBC_4h.csv") %>%
filter(log2FoldChange > 0 & padj < 0.1)
View(RBC_vs_iRBC_mouse)
View(untr_vs_SPZ_GFPpos_human)
View(RBC_vs_iRBC_mouse)
genelist <- list(
SPZ_GFPpos_human = untr_vs_SPZ_GFPpos_human$gene,
SPZ_GFPpos_mouse = untr_vs_SPZ_GFPpos_mouse$GeneSymbol,
iRBC_human = RBC_vs_iRBC_human$gene,
iRBC_mouse = RBC_vs_iRBC_mouse$GeneSymbol
)
upset(fromList(genelist),
order.by = "freq")
library(UpSet)
install.packages("UpSetR")
install.packages("UpSetR")
library(UpSetR)
upset(fromList(genelist),
order.by = "freq")
library(UpSetR)
library(tidyverse)
# read tables
# untr_vs_SPZ_GFPpos_human <- read.csv("tables/SPZ_GFPpos_vs_untr_human.csv")
# untr_vs_SPZ_GFPpos_mouse <- read.csv("../Data/SPZ-GFPpos_untr_df_4h.csv") %>%
#   filter(log2FoldChange > 0 & padj < 0.1)
untr_vs_SPZ_human <- read.csv("tables/SPZ_vs_untr_human_nothr.csv") %>%
filter(log2FoldChange > 0 & padj < 0.05)
untr_vs_SPZ_mouse <- read.csv("../Data/SPZ-GFPpos_untr_df_4h.csv") %>%
filter(log2FoldChange > 0 & padj < 0.05)
RBC_vs_iRBC_human <- read.csv("tables/iRBC_vs_RBC_human_nothr.csv") %>%
filter(log2FoldChange > 0 & padj < 0.05)
RBC_vs_iRBC_mouse <- read.csv("../Data/iRBC_RBC_4h.csv") %>%
filter(log2FoldChange > 0 & padj < 0.05)
# read tables
# untr_vs_SPZ_GFPpos_human <- read.csv("tables/SPZ_GFPpos_vs_untr_human.csv")
# untr_vs_SPZ_GFPpos_mouse <- read.csv("../Data/SPZ-GFPpos_untr_df_4h.csv") %>%
#   filter(log2FoldChange > 0 & padj < 0.1)
untr_vs_SPZ_human <- read.csv("tables/SPZ_vs_untr_human_nothr.csv") %>%
filter(log2FoldChange > 0 & padj < 0.1)
untr_vs_SPZ_mouse <- read.csv("../Data/SPZ-GFPpos_untr_df_4h.csv") %>%
filter(log2FoldChange > 0 & padj < 0.1)
RBC_vs_iRBC_human <- read.csv("tables/iRBC_vs_RBC_human_nothr.csv") %>%
filter(log2FoldChange > 0 & padj < 0.1)
RBC_vs_iRBC_mouse <- read.csv("../Data/iRBC_RBC_4h.csv") %>%
filter(log2FoldChange > 0 & padj < 0.1)
genelist <- list(
SPZ_GFPpos_human = untr_vs_SPZ_human$gene,
SPZ_GFPpos_mouse = untr_vs_SPZ_mouse$GeneSymbol,
iRBC_human = RBC_vs_iRBC_human$gene,
iRBC_mouse = RBC_vs_iRBC_mouse$GeneSymbol
)
upset(fromList(genelist),
order.by = "freq")
View(untr_vs_SPZ_mouse)
View(untr_vs_SPZ_human)
View(untr_vs_SPZ_mouse)
View(untr_vs_SPZ_human)
View(untr_vs_SPZ_mouse)
convertMouseGeneList <- function(x){
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "dec2021.archive.ensembl.org")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl", host = "dec2021.archive.ensembl.org")
genesV2 = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = x , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
humanx <- unique(genesV2[, 2])
return(humanx)
}
genelist <- list(
SPZ_human = untr_vs_SPZ_human$gene,
SPZ_mouse = convertMouseGeneList(untr_vs_SPZ_mouse$GeneSymbol),
iRBC_human = RBC_vs_iRBC_human$gene,
iRBC_mouse = convertMouseGeneList(RBC_vs_iRBC_mouse$GeneSymbol)
)
library(biomaRt)
convertMouseGeneList <- function(x){
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "dec2021.archive.ensembl.org")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl", host = "dec2021.archive.ensembl.org")
genesV2 = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = x , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
humanx <- unique(genesV2[, 2])
return(humanx)
}
genelist <- list(
SPZ_human = untr_vs_SPZ_human$gene,
SPZ_mouse = convertMouseGeneList(untr_vs_SPZ_mouse$GeneSymbol),
iRBC_human = RBC_vs_iRBC_human$gene,
iRBC_mouse = convertMouseGeneList(RBC_vs_iRBC_mouse$GeneSymbol)
)
genelist <- list(
SPZ_human = untr_vs_SPZ_human$gene,
SPZ_mouse = convertMouseGeneList(untr_vs_SPZ_mouse$GeneSymbol),
iRBC_human = RBC_vs_iRBC_human$gene,
iRBC_mouse = convertMouseGeneList(RBC_vs_iRBC_mouse$GeneSymbol)
)
View(genelist)
upset(fromList(genelist),
order.by = "freq")
# read tables
# untr_vs_SPZ_GFPpos_human <- read.csv("tables/SPZ_GFPpos_vs_untr_human.csv")
# untr_vs_SPZ_GFPpos_mouse <- read.csv("../Data/SPZ-GFPpos_untr_df_4h.csv") %>%
#   filter(log2FoldChange > 0 & padj < 0.1)
untr_vs_SPZ_human <- read.csv("tables/SPZ_vs_untr_human_nothr.csv") %>%
filter(log2FoldChange > 1 & padj < 0.1)
untr_vs_SPZ_mouse <- read.csv("../Data/SPZ-GFPpos_untr_df_4h.csv") %>%
filter(log2FoldChange > 1 & padj < 0.1)
RBC_vs_iRBC_human <- read.csv("tables/iRBC_vs_RBC_human_nothr.csv") %>%
filter(log2FoldChange > 1 & padj < 0.1)
RBC_vs_iRBC_mouse <- read.csv("../Data/iRBC_RBC_4h.csv") %>%
filter(log2FoldChange > 1 & padj < 0.1)
# read tables
# untr_vs_SPZ_GFPpos_human <- read.csv("tables/SPZ_GFPpos_vs_untr_human.csv")
# untr_vs_SPZ_GFPpos_mouse <- read.csv("../Data/SPZ-GFPpos_untr_df_4h.csv") %>%
#   filter(log2FoldChange > 0 & padj < 0.1)
untr_vs_SPZ_human <- read.csv("tables/SPZ_vs_untr_human_nothr.csv") %>%
filter(log2FoldChange > 1 & padj < 0.1)
untr_vs_SPZ_mouse <- read.csv("../Data/SPZ-GFPpos_untr_df_4h.csv") %>%
filter(log2FoldChange > 1 & padj < 0.1)
RBC_vs_iRBC_human <- read.csv("tables/iRBC_vs_RBC_human_nothr.csv") %>%
filter(log2FoldChange > 1 & padj < 0.1)
RBC_vs_iRBC_mouse <- read.csv("../Data/iRBC_RBC_4h.csv") %>%
filter(log2FoldChange > 0 & padj < 0.1)
convertMouseGeneList <- function(x){
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "https://dec2021.archive.ensembl.org")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl", host = "https://dec2021.archive.ensembl.org")
genesV2 = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = x , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
humanx <- unique(genesV2[, 2])
return(humanx)
}
# Upset
genelist <- list(
SPZ_human = untr_vs_SPZ_human$gene,
SPZ_mouse = convertMouseGeneList(untr_vs_SPZ_mouse$GeneSymbol),
iRBC_human = RBC_vs_iRBC_human$gene,
iRBC_mouse = convertMouseGeneList(RBC_vs_iRBC_mouse$GeneSymbol)
)
upset(fromList(genelist),
order.by = "freq")
upset(fromList(genelist),
order.by = "freq")
